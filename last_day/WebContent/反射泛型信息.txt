反射泛型信息

Class --> Type getGenericSupperclass()
Type --> ParameterizedType，把Type强转成ParameterizedType类型！！！
ParameterizedType --> 参数化类型 = A<String>
ParameterizedType：Type[] getActualTypeArguments()，A<String>中的String
Type[]就是Class[]，我们就得到了类型参数了！


abstract class A<T> {
	public A() {
		/*
		 * 在这里获取子类传递的泛型信息，要得到一个Class！
		 */
//		Class clazz = this.getClass();//得到子类的类型
//		Type type = clazz.getGenericSuperclass();//获取传递给父类参数化类型
//		ParameterizedType pType = (ParameterizedType) type;//它就是A<String>
//		Type[] types = pType.getActualTypeArguments();//它就是一个Class数组
//		Class c = (Class)types[0];//它就是String
//		
		Class c = (Class)((ParameterizedType)this.getClass()
				.getGenericSuperclass()).getActualTypeArguments()[0];
		
		System.out.println(c.getName());
	}
}

class B extends A<String> {
	
}

class C extends A<Integer> {
	
}


















